exec("import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport joblib\n\n# Load the dataset\ndf = pd.read_csv('/Users/wangxiang/agent_for_prediction/datasets/social-media_cleaned.csv')\n\n# Prepare the features and target variable\nX = df[['UsageDuration', 'Age']]  # Corrected 'UsageDuraiton' to 'UsageDuration'\ny = df['TotalLikes']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize the Random Forest Regressor\nmodel = RandomForestRegressor(n_estimators=100, max_depth=None, min_samples_split=2, min_samples_leaf=1, random_state=42)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nmae = mean_absolute_error(y_test, y_pred)\nrmse = mean_squared_error(y_test, y_pred, squared=False)\n\n# Print evaluation metrics\nprint(f'Mean Absolute Error: {mae}')\nprint(f'Root Mean Squared Error: {rmse}')\n\n# Save the trained model\njoblib.dump(model, '/Users/wangxiang/agent_for_prediction/pred_model.pkl')\n\n# Load the model\nmodel = joblib.load('/Users/wangxiang/agent_for_prediction/pred_model.pkl')\n\n# Load the dataset for testing\ndf_test = pd.read_csv('/Users/wangxiang/agent_for_prediction/datasets/social-media_cleaned.csv')\n\n# Prepare the features for testing\nX_test = df_test[['UsageDuration', 'Age']]\n\n# Make predictions\ntry:\n    y_pred = model.predict(X_test)\n    # Check if predictions are made\n    assert len(y_pred) == len(X_test), 'Prediction length does not match test data length'\n    print('Predictions made successfully.')\nexcept Exception as e:\n    print(f'Error during prediction: {e}')  \n\n# Test cases to validate the functionality\n\n# Test case 1: Check if the dataset loads correctly\ntry:\n    df = pd.read_csv('/Users/wangxiang/agent_for_prediction/datasets/social-media_cleaned.csv')\n    assert not df.empty, 'Dataset is empty'\n    print('Test case 1 passed: Dataset loaded successfully.')\nexcept Exception as e:\n    print(f'Test case 1 failed: {e}')\n\n# Test case 2: Check if the required columns exist\ntry:\n    required_columns = ['UsageDuration', 'Age', 'TotalLikes']\n    for col in required_columns:\n        assert col in df.columns, f'{col} is not in the DataFrame'\n    print('Test case 2 passed: Required columns are present.')\nexcept Exception as e:\n    print(f'Test case 2 failed: {e}')" test="# Test case 1: Check if the dataset loads correctly\ntry:\n    df = pd.read_csv('/Users/wangxiang/agent_for_prediction/datasets/social-media_cleaned.csv')\n    assert not df.empty, 'Dataset is empty'\n    print('Test case 1 passed: Dataset loaded successfully.')\nexcept Exception as e:\n    print(f'Test case 1 failed: {e}')\n\n# Test case 2: Check if the required columns exist\ntry:\n    required_columns = ['UsageDuration', 'Age', 'TotalLikes']\n    for col in required_columns:\n        assert col in df.columns, f'{col} is not in the DataFrame'\n    print('Test case 2 passed: Required columns are present.')\nexcept Exception as e:\n    print(f'Test case 2 failed: {e}')")